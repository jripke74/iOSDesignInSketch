//
//  StyleKit.swift
//
//  Created on 7/2/17.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class StyleKit: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawIPhone7Plus(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 414, height: 736), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 414, height: 736), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 414, y: resizedFrame.height / 736)
        
        /// calculator
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 261)
            
            /// background
            let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 414, height: 420.41))
            context.saveGState()
            UIColor(white: 0.847, alpha: 1).setFill()
            background.fill()
            context.restoreGState()
            
            /// buttons
            do {
                context.saveGState()
                context.translateBy(x: 17, y: 15)
                
                /// blank
                let blank = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 80, height: 82.03), cornerRadius: 20)
                context.saveGState()
                context.translateBy(x: 300, y: 308.65)
                UIColor.white.setFill()
                blank.fill()
                context.restoreGState()
                
                /// clear
                do {
                    context.saveGState()
                    context.translateBy(x: 200, y: 307)
                    
                    /// clear
                    let clear = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 80, height: 82.03), cornerRadius: 20)
                    context.saveGState()
                    context.translateBy(x: 0, y: 0.62)
                    UIColor.white.setFill()
                    clear.fill()
                    context.restoreGState()
                    
                    /// r
                    let r = UIBezierPath()
                    r.move(to: CGPoint(x: 0, y: 9.91))
                    r.addCurve(to: CGPoint(x: 13.47, y: 5.8), controlPoint1: CGPoint(x: 3.17, y: 25.74), controlPoint2: CGPoint(x: 7.31, y: -14.35))
                    context.saveGState()
                    context.translateBy(x: 62.5, y: 31.3)
                    r.lineWidth = 4
                    UIColor.black.setStroke()
                    r.stroke()
                    context.restoreGState()
                    
                    /// a
                    let a = UIBezierPath()
                    a.move(to: CGPoint(x: 8.25, y: 0.14))
                    a.addCurve(to: CGPoint(x: 9.97, y: 9), controlPoint1: CGPoint(x: -8.56, y: -1.59), controlPoint2: CGPoint(x: 4.66, y: 13.14))
                    a.addCurve(to: CGPoint(x: 9.88, y: 7.06), controlPoint1: CGPoint(x: 11.81, y: 7.58), controlPoint2: CGPoint(x: 5.98, y: -3.74))
                    context.saveGState()
                    context.translateBy(x: 48.46, y: 39.99)
                    a.lineWidth = 4
                    UIColor.black.setStroke()
                    a.stroke()
                    context.restoreGState()
                    
                    /// e
                    let e = UIBezierPath()
                    e.move(to: CGPoint(x: 1.6, y: 3.19))
                    e.addCurve(to: CGPoint(x: 1.57, y: 5.5), controlPoint1: CGPoint(x: 23.6, y: -0.16), controlPoint2: CGPoint(x: -7.04, y: -2.73))
                    e.addCurve(to: CGPoint(x: 10.68, y: 9.39), controlPoint1: CGPoint(x: 3.96, y: 7.78), controlPoint2: CGPoint(x: 7.64, y: 8.09))
                    context.saveGState()
                    context.translateBy(x: 32.44, y: 37.88)
                    e.lineWidth = 4
                    UIColor.black.setStroke()
                    e.stroke()
                    context.restoreGState()
                    
                    /// l
                    let l = UIBezierPath()
                    l.move(to: CGPoint.zero)
                    l.addLine(to: CGPoint(x: 0, y: 3.25))
                    l.addLine(to: CGPoint(x: 0, y: 3.82))
                    l.addLine(to: CGPoint(x: 0, y: 4.39))
                    l.addLine(to: CGPoint(x: 0, y: 4.96))
                    l.addLine(to: CGPoint(x: 0, y: 5.54))
                    l.addLine(to: CGPoint(x: 0, y: 6.11))
                    l.addLine(to: CGPoint(x: 0, y: 6.68))
                    l.addLine(to: CGPoint(x: 0, y: 7.25))
                    l.addLine(to: CGPoint(x: 0, y: 7.81))
                    l.addLine(to: CGPoint(x: 0, y: 8.38))
                    l.addLine(to: CGPoint(x: 0, y: 8.95))
                    l.addLine(to: CGPoint(x: 0, y: 9.52))
                    l.addLine(to: CGPoint(x: 0, y: 10.09))
                    l.addLine(to: CGPoint(x: 0, y: 10.66))
                    l.addLine(to: CGPoint(x: 0, y: 10.92))
                    l.addLine(to: CGPoint(x: 0, y: 11.49))
                    l.addLine(to: CGPoint(x: 0, y: 11.75))
                    l.addLine(to: CGPoint(x: 0, y: 12.31))
                    l.addLine(to: CGPoint(x: 0, y: 12.57))
                    l.addLine(to: CGPoint(x: 0, y: 12.82))
                    l.addLine(to: CGPoint(x: 0, y: 13.39))
                    l.addLine(to: CGPoint(x: 0, y: 13.65))
                    l.addLine(to: CGPoint(x: 0, y: 13.91))
                    l.addLine(to: CGPoint(x: 0, y: 14.17))
                    l.addLine(to: CGPoint(x: 0, y: 14.4))
                    context.saveGState()
                    context.translateBy(x: 24.02, y: 31.63)
                    l.lineWidth = 4
                    UIColor.black.setStroke()
                    l.stroke()
                    context.restoreGState()
                    
                    /// C
                    let c = UIBezierPath()
                    c.move(to: CGPoint(x: 12.71, y: 0))
                    c.addCurve(to: CGPoint(x: 12.64, y: 19.86), controlPoint1: CGPoint(x: -5.68, y: 0), controlPoint2: CGPoint(x: -2.71, y: 14.28))
                    context.saveGState()
                    context.translateBy(x: 5.43, y: 29.41)
                    c.lineWidth = 4
                    UIColor.black.setStroke()
                    c.stroke()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// 0
                do {
                    context.saveGState()
                    context.translateBy(x: 100, y: 308)
                    
                    /// 0
                    let _0 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 80, height: 82.03), cornerRadius: 20)
                    context.saveGState()
                    context.translateBy(x: 0, y: -0)
                    UIColor.white.setFill()
                    _0.fill()
                    context.restoreGState()
                    
                    /// zero
                    let zero = UIBezierPath()
                    zero.move(to: CGPoint(x: 21.1, y: 0.31))
                    zero.addCurve(to: CGPoint(x: 8.34, y: 1.33), controlPoint1: CGPoint(x: 16.85, y: 0.65), controlPoint2: CGPoint(x: 11.83, y: -1.13))
                    zero.addCurve(to: CGPoint(x: 7.97, y: 49.02), controlPoint1: CGPoint(x: -0.12, y: 7.31), controlPoint2: CGPoint(x: -5, y: 46.43))
                    zero.addCurve(to: CGPoint(x: 23.67, y: 1.89), controlPoint1: CGPoint(x: 48.75, y: 57.19), controlPoint2: CGPoint(x: 70.23, y: 11.67))
                    zero.addLine(to: CGPoint(x: 21.1, y: 0.31))
                    zero.close()
                    zero.move(to: CGPoint(x: 21.1, y: 0.31))
                    context.saveGState()
                    context.translateBy(x: 15, y: 16)
                    zero.lineWidth = 5
                    UIColor.black.setStroke()
                    zero.stroke()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// =
                do {
                    context.saveGState()
                    context.translateBy(x: 0, y: 309)
                    
                    /// =
                    let layer = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 80, height: 82.03), cornerRadius: 20)
                    context.saveGState()
                    context.translateBy(x: 0, y: -0)
                    UIColor.white.setFill()
                    layer.fill()
                    context.restoreGState()
                    
                    /// equal2
                    let equal2 = UIBezierPath()
                    equal2.move(to: CGPoint(x: 0, y: 2.69))
                    equal2.addCurve(to: CGPoint(x: 50, y: 1.19), controlPoint1: CGPoint(x: 23.07, y: -1.9), controlPoint2: CGPoint(x: 6.61, y: 0.65))
                    context.saveGState()
                    context.translateBy(x: 15, y: 35)
                    equal2.lineWidth = 5
                    UIColor.black.setStroke()
                    equal2.stroke()
                    context.restoreGState()
                    
                    /// equal1
                    let equal1 = UIBezierPath()
                    equal1.move(to: CGPoint(x: 0, y: 2.34))
                    equal1.addCurve(to: CGPoint(x: 50, y: 0.5), controlPoint1: CGPoint(x: 35.67, y: -0.57), controlPoint2: CGPoint(x: 18.99, y: -0.21))
                    context.saveGState()
                    context.translateBy(x: 15, y: 48)
                    equal1.lineWidth = 5
                    UIColor.black.setStroke()
                    equal1.stroke()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// blank
                let blank3 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 80, height: 82.03), cornerRadius: 20)
                context.saveGState()
                context.translateBy(x: 300, y: 205.08)
                UIColor.white.setFill()
                blank3.fill()
                context.restoreGState()
                
                /// 1
                do {
                    context.saveGState()
                    context.translateBy(x: 200, y: 205)
                    
                    /// 1
                    let _1 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 80, height: 82.03), cornerRadius: 20)
                    context.saveGState()
                    context.translateBy(x: 0, y: 0.08)
                    UIColor.white.setFill()
                    _1.fill()
                    context.restoreGState()
                    
                    /// one
                    let one = UIBezierPath()
                    one.move(to: CGPoint.zero)
                    one.addCurve(to: CGPoint(x: 8.83, y: 53.76), controlPoint1: CGPoint(x: 1.21, y: 18.27), controlPoint2: CGPoint(x: 6.82, y: 35.09))
                    context.saveGState()
                    context.translateBy(x: 36.68, y: 13.45)
                    one.lineWidth = 5
                    UIColor.black.setStroke()
                    one.stroke()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// 2
                do {
                    context.saveGState()
                    context.translateBy(x: 100, y: 205)
                    
                    /// 2
                    let _2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 80, height: 82.03), cornerRadius: 20)
                    context.saveGState()
                    context.translateBy(x: 0, y: -0)
                    UIColor.white.setFill()
                    _2.fill()
                    context.restoreGState()
                    
                    /// two
                    let two = UIBezierPath()
                    two.move(to: CGPoint(x: 2.23, y: 0.18))
                    two.addCurve(to: CGPoint(x: 31.32, y: 5.47), controlPoint1: CGPoint(x: 10.32, y: 0.18), controlPoint2: CGPoint(x: 24.54, y: -1.52))
                    two.addCurve(to: CGPoint(x: 26.19, y: 45.38), controlPoint1: CGPoint(x: 44.45, y: 19.01), controlPoint2: CGPoint(x: 49.63, y: 41.01))
                    two.addCurve(to: CGPoint(x: 5.14, y: 46.43), controlPoint1: CGPoint(x: 19.26, y: 46.67), controlPoint2: CGPoint(x: 12.15, y: 46.87))
                    two.addCurve(to: CGPoint(x: 19.11, y: 38.34), controlPoint1: CGPoint(x: -8.43, y: 45.58), controlPoint2: CGPoint(x: 7.91, y: 35.52))
                    two.addCurve(to: CGPoint(x: 50, y: 50), controlPoint1: CGPoint(x: 29.73, y: 41.01), controlPoint2: CGPoint(x: 39.7, y: 46.11))
                    context.saveGState()
                    context.translateBy(x: 15, y: 16)
                    two.lineWidth = 5
                    UIColor.black.setStroke()
                    two.stroke()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// 3
                do {
                    context.saveGState()
                    context.translateBy(x: 0, y: 205)
                    
                    /// 3
                    let _3 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 80, height: 82.03), cornerRadius: 20)
                    context.saveGState()
                    context.translateBy(x: 0, y: -0)
                    UIColor.white.setFill()
                    _3.fill()
                    context.restoreGState()
                    
                    /// three
                    let three = UIBezierPath()
                    three.move(to: CGPoint(x: 5.31, y: 0.35))
                    three.addCurve(to: CGPoint(x: 43.74, y: 15.55), controlPoint1: CGPoint(x: 20.29, y: 0.35), controlPoint2: CGPoint(x: 47.08, y: -3.68))
                    three.addCurve(to: CGPoint(x: 20.59, y: 26.8), controlPoint1: CGPoint(x: 42.5, y: 22.69), controlPoint2: CGPoint(x: 25.65, y: 26.01))
                    three.addCurve(to: CGPoint(x: 5.83, y: 27.52), controlPoint1: CGPoint(x: 15.74, y: 27.56), controlPoint2: CGPoint(x: 0.92, y: 27.13))
                    three.addCurve(to: CGPoint(x: 32.67, y: 27.76), controlPoint1: CGPoint(x: 14.74, y: 28.24), controlPoint2: CGPoint(x: 23.91, y: 26.16))
                    three.addCurve(to: CGPoint(x: 27.11, y: 48.34), controlPoint1: CGPoint(x: 52.88, y: 31.45), controlPoint2: CGPoint(x: 34.74, y: 45.8))
                    three.addCurve(to: CGPoint(x: 0, y: 47), controlPoint1: CGPoint(x: 14.99, y: 52.39), controlPoint2: CGPoint(x: 10.97, y: 47.86))
                    context.saveGState()
                    context.translateBy(x: 18, y: 16)
                    three.lineWidth = 5
                    UIColor.black.setStroke()
                    three.stroke()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// -
                do {
                    context.saveGState()
                    context.translateBy(x: 300, y: 102)
                    
                    /// -
                    let layer3 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 80, height: 82.03), cornerRadius: 20)
                    context.saveGState()
                    context.translateBy(x: 0, y: 1)
                    UIColor.white.setFill()
                    layer3.fill()
                    context.restoreGState()
                    
                    /// minus
                    let minus = UIBezierPath()
                    minus.move(to: CGPoint.zero)
                    minus.addCurve(to: CGPoint(x: 49.84, y: 2.36), controlPoint1: CGPoint(x: 15.25, y: 0), controlPoint2: CGPoint(x: 52.79, y: 10.59))
                    context.saveGState()
                    context.translateBy(x: 15, y: 39)
                    minus.lineWidth = 5
                    UIColor.black.setStroke()
                    minus.stroke()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// 4
                do {
                    context.saveGState()
                    context.translateBy(x: 200, y: 103)
                    
                    /// 4
                    let _4 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 80, height: 82.03), cornerRadius: 20)
                    context.saveGState()
                    context.translateBy(x: 0, y: -0)
                    UIColor.white.setFill()
                    _4.fill()
                    context.restoreGState()
                    
                    /// four2
                    let four2 = UIBezierPath()
                    four2.move(to: CGPoint(x: 0.02, y: 0))
                    four2.addCurve(to: CGPoint(x: 4.21, y: 34.16), controlPoint1: CGPoint(x: 0.02, y: 9.19), controlPoint2: CGPoint(x: -0.56, y: 28.59))
                    four2.addCurve(to: CGPoint(x: 16, y: 28.84), controlPoint1: CGPoint(x: 7.02, y: 37.43), controlPoint2: CGPoint(x: 11.73, y: 29.43))
                    four2.addCurve(to: CGPoint(x: 42.1, y: 28.84), controlPoint1: CGPoint(x: 24.62, y: 27.63), controlPoint2: CGPoint(x: 33.43, y: 29.44))
                    four2.addCurve(to: CGPoint(x: 41.08, y: 27.08), controlPoint1: CGPoint(x: 42.78, y: 28.79), controlPoint2: CGPoint(x: 41.42, y: 27.66))
                    context.saveGState()
                    context.translateBy(x: 20, y: 13)
                    four2.lineWidth = 5
                    UIColor.black.setStroke()
                    four2.stroke()
                    context.restoreGState()
                    
                    /// four1
                    let four1 = UIBezierPath()
                    four1.move(to: CGPoint.zero)
                    four1.addCurve(to: CGPoint(x: 7.43, y: 50), controlPoint1: CGPoint(x: 0, y: 17.84), controlPoint2: CGPoint(x: 6.17, y: 32.27))
                    context.saveGState()
                    context.translateBy(x: 37, y: 20)
                    four1.lineWidth = 5
                    UIColor.black.setStroke()
                    four1.stroke()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// 5
                do {
                    context.saveGState()
                    context.translateBy(x: 100, y: 103)
                    
                    /// 5
                    let _5 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 80, height: 82.03), cornerRadius: 20)
                    context.saveGState()
                    context.translateBy(x: 0, y: -0)
                    UIColor.white.setFill()
                    _5.fill()
                    context.restoreGState()
                    
                    /// five2
                    let five2 = UIBezierPath()
                    five2.move(to: CGPoint(x: 4.21, y: 0))
                    five2.addCurve(to: CGPoint(x: 3.04, y: 22.44), controlPoint1: CGPoint(x: 3.82, y: 7.48), controlPoint2: CGPoint(x: -4, y: 17.94))
                    five2.addCurve(to: CGPoint(x: 45.2, y: 29.41), controlPoint1: CGPoint(x: 35.33, y: 43.09), controlPoint2: CGPoint(x: 31.54, y: 4.23))
                    five2.addCurve(to: CGPoint(x: 45.2, y: 36.7), controlPoint1: CGPoint(x: 46.4, y: 31.62), controlPoint2: CGPoint(x: 46.88, y: 34.73))
                    five2.addCurve(to: CGPoint(x: 0, y: 42.34), controlPoint1: CGPoint(x: 35.82, y: 47.73), controlPoint2: CGPoint(x: 11.65, y: 57.21))
                    context.saveGState()
                    context.translateBy(x: 17, y: 19)
                    five2.lineWidth = 5
                    UIColor.black.setStroke()
                    five2.stroke()
                    context.restoreGState()
                    
                    /// five1
                    let five1 = UIBezierPath()
                    five1.move(to: CGPoint.zero)
                    five1.addCurve(to: CGPoint(x: 39.65, y: 3.09), controlPoint1: CGPoint(x: 13.22, y: 1.03), controlPoint2: CGPoint(x: 26.43, y: 2.06))
                    context.saveGState()
                    context.translateBy(x: 20, y: 18)
                    five1.lineWidth = 5
                    UIColor.black.setStroke()
                    five1.stroke()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// 6
                do {
                    context.saveGState()
                    context.translateBy(x: 0, y: 103)
                    
                    /// 6
                    let _6 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 80, height: 82.03), cornerRadius: 20)
                    context.saveGState()
                    context.translateBy(x: 0, y: -0)
                    UIColor.white.setFill()
                    _6.fill()
                    context.restoreGState()
                    
                    /// six
                    let six = UIBezierPath()
                    six.move(to: CGPoint(x: 46.48, y: 0.46))
                    six.addCurve(to: CGPoint(x: 4.84, y: 6.41), controlPoint1: CGPoint(x: 39.26, y: 0.46), controlPoint2: CGPoint(x: 11.63, y: -2.47))
                    six.addCurve(to: CGPoint(x: 48.52, y: 47.93), controlPoint1: CGPoint(x: -12.26, y: 28.8), controlPoint2: CGPoint(x: 19.19, y: 58.08))
                    six.addCurve(to: CGPoint(x: 48.24, y: 40.78), controlPoint1: CGPoint(x: 51.15, y: 47.02), controlPoint2: CGPoint(x: 49.77, y: 42.79))
                    six.addCurve(to: CGPoint(x: 14.15, y: 28.85), controlPoint1: CGPoint(x: 41.81, y: 32.36), controlPoint2: CGPoint(x: 26.58, y: 25.36))
                    six.addCurve(to: CGPoint(x: 11.43, y: 41.84), controlPoint1: CGPoint(x: 12.62, y: 29.28), controlPoint2: CGPoint(x: 11.78, y: 36.72))
                    context.saveGState()
                    context.translateBy(x: 15, y: 16)
                    six.lineWidth = 5
                    UIColor.black.setStroke()
                    six.stroke()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// +
                do {
                    context.saveGState()
                    context.translateBy(x: 300, y: 0)
                    
                    /// +
                    let layer5 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 80, height: 82.03), cornerRadius: 20)
                    context.saveGState()
                    context.translateBy(x: 0, y: -0)
                    UIColor.white.setFill()
                    layer5.fill()
                    context.restoreGState()
                    
                    /// plus2
                    let plus2 = UIBezierPath()
                    plus2.move(to: CGPoint.zero)
                    plus2.addCurve(to: CGPoint(x: 0.6, y: 45), controlPoint1: CGPoint(x: 0.2, y: 15), controlPoint2: CGPoint(x: 0.4, y: 30))
                    context.saveGState()
                    context.translateBy(x: 40, y: 15)
                    plus2.lineWidth = 5
                    UIColor.black.setStroke()
                    plus2.stroke()
                    context.restoreGState()
                    
                    /// plus1
                    let plus1 = UIBezierPath()
                    plus1.move(to: CGPoint(x: 0, y: 7.82))
                    plus1.addCurve(to: CGPoint(x: 17.14, y: 0.72), controlPoint1: CGPoint(x: 10.49, y: 7.82), controlPoint2: CGPoint(x: -0.35, y: 8.68))
                    plus1.addCurve(to: CGPoint(x: 23.72, y: 3.09), controlPoint1: CGPoint(x: 22.51, y: -1.72), controlPoint2: CGPoint(x: 18.38, y: 2.8))
                    plus1.addCurve(to: CGPoint(x: 38, y: 1.67), controlPoint1: CGPoint(x: 28.49, y: 3.35), controlPoint2: CGPoint(x: 33.24, y: 2.15))
                    context.saveGState()
                    context.translateBy(x: 21, y: 37)
                    plus1.lineWidth = 5
                    UIColor.black.setStroke()
                    plus1.stroke()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// 7
                do {
                    context.saveGState()
                    context.translateBy(x: 200, y: 0)
                    
                    /// 7
                    let _7 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 80, height: 82.03), cornerRadius: 20)
                    context.saveGState()
                    context.translateBy(x: 0, y: -0)
                    UIColor.white.setFill()
                    _7.fill()
                    context.restoreGState()
                    
                    /// seven2
                    let seven2 = UIBezierPath()
                    seven2.move(to: CGPoint(x: 0, y: 2.33))
                    seven2.addCurve(to: CGPoint(x: 28, y: 6.17), controlPoint1: CGPoint(x: 43.79, y: -1.06), controlPoint2: CGPoint(x: 1.95, y: -1.51))
                    seven2.addCurve(to: CGPoint(x: 37.89, y: 6.42), controlPoint1: CGPoint(x: 31.17, y: 7.11), controlPoint2: CGPoint(x: 39.02, y: 3.25))
                    seven2.addCurve(to: CGPoint(x: 12.33, y: 50), controlPoint1: CGPoint(x: 32.2, y: 22.34), controlPoint2: CGPoint(x: 20.85, y: 35.47))
                    context.saveGState()
                    context.translateBy(x: 21, y: 16)
                    seven2.lineWidth = 5
                    UIColor.black.setStroke()
                    seven2.stroke()
                    context.restoreGState()
                    
                    /// seven1
                    let seven1 = UIBezierPath()
                    seven1.move(to: CGPoint.zero)
                    seven1.addCurve(to: CGPoint(x: 24.27, y: 0.95), controlPoint1: CGPoint(x: 8.09, y: 0.32), controlPoint2: CGPoint(x: 16.18, y: 0.64))
                    context.saveGState()
                    context.translateBy(x: 37, y: 41)
                    seven1.usesEvenOddFillRule = true
                    UIColor.black.setFill()
                    seven1.fill()
                    seven1.lineWidth = 5
                    UIColor.black.setStroke()
                    seven1.stroke()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// 8
                do {
                    context.saveGState()
                    context.translateBy(x: 100, y: 0)
                    
                    /// 8
                    let _8 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 80, height: 82.03), cornerRadius: 20)
                    context.saveGState()
                    context.translateBy(x: 0, y: -0)
                    UIColor.white.setFill()
                    _8.fill()
                    context.restoreGState()
                    
                    /// eight
                    let eight = UIBezierPath()
                    eight.move(to: CGPoint(x: 0, y: 0.09))
                    eight.addCurve(to: CGPoint(x: 7.12, y: 30.99), controlPoint1: CGPoint(x: 48.2, y: -1.26), controlPoint2: CGPoint(x: 12.54, y: 13.26))
                    eight.addCurve(to: CGPoint(x: 34.29, y: 48.25), controlPoint1: CGPoint(x: 4.65, y: 39.07), controlPoint2: CGPoint(x: 20.47, y: 55.36))
                    eight.addCurve(to: CGPoint(x: 35.33, y: 41.15), controlPoint1: CGPoint(x: 37.07, y: 46.81), controlPoint2: CGPoint(x: 36.47, y: 43.39))
                    eight.addCurve(to: CGPoint(x: 20.9, y: 21.94), controlPoint1: CGPoint(x: 31.87, y: 34.35), controlPoint2: CGPoint(x: 26.55, y: 28.02))
                    eight.addCurve(to: CGPoint(x: 4.27, y: 0.68), controlPoint1: CGPoint(x: 0.71, y: 0.22), controlPoint2: CGPoint(x: 19.89, y: 34.3))
                    context.saveGState()
                    context.translateBy(x: 22, y: 16)
                    eight.lineWidth = 5
                    UIColor.black.setStroke()
                    eight.stroke()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// 9
                do {
                    context.saveGState()
                    
                    /// 9
                    let _9 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 80, height: 82.03), cornerRadius: 20)
                    context.saveGState()
                    context.translateBy(x: 0, y: -0)
                    UIColor.white.setFill()
                    _9.fill()
                    context.restoreGState()
                    
                    /// nine
                    let nine = UIBezierPath()
                    nine.move(to: CGPoint(x: 26.78, y: 0.42))
                    nine.addCurve(to: CGPoint(x: 4.34, y: 3.82), controlPoint1: CGPoint(x: 22.62, y: 0.56), controlPoint2: CGPoint(x: 9.15, y: -1.94))
                    nine.addCurve(to: CGPoint(x: 7.43, y: 25.65), controlPoint1: CGPoint(x: 0.07, y: 8.95), controlPoint2: CGPoint(x: -3.98, y: 24.61))
                    nine.addCurve(to: CGPoint(x: 25.78, y: 16.14), controlPoint1: CGPoint(x: 14.35, y: 26.27), controlPoint2: CGPoint(x: 24.78, y: 24.6))
                    nine.addCurve(to: CGPoint(x: 25.78, y: 2.16), controlPoint1: CGPoint(x: 26.33, y: 11.51), controlPoint2: CGPoint(x: 24.16, y: -2.25))
                    nine.addCurve(to: CGPoint(x: 29.83, y: 50), controlPoint1: CGPoint(x: 30.51, y: 15.03), controlPoint2: CGPoint(x: 29.66, y: 36.69))
                    context.saveGState()
                    context.translateBy(x: 25, y: 16)
                    nine.lineWidth = 5
                    UIColor.black.setStroke()
                    nine.stroke()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// Rectangle 4
        let rectangle4 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 414, height: 56))
        context.saveGState()
        context.translateBy(x: 0, y: 680)
        UIColor(hue: 1, saturation: 0.01, brightness: 0.484, alpha: 1).setFill()
        rectangle4.fill()
        context.restoreGState()
        /// Rectangle 4 Copy
        let rectangle4Copy = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 414, height: 56))
        context.saveGState()
        UIColor(hue: 1, saturation: 0.008, brightness: 0.482, alpha: 1).setFill()
        rectangle4Copy.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
    class func imageOfIPhone7Plus() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 414, height: 736), false, 0)
        StyleKit.drawIPhone7Plus()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
